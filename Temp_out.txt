      {
        slug: 'mastering-json-formatting-and-validation',
        title: 'Mastering JSON Formatting and Validation: A Developer\'s Essential Guide',
        excerpt: 'Learn why proper JSON formatting matters and how to validate your data.',
        featuredImage: 'https://images.pexels.com/photos/3183150/pexels-photo-3183150.jpeg?auto=compress&cs=tinysrgb&w=1000'
      }
    ]
  }
];

const mockCategories = [
  { slug: 'security', name: 'Security', count: 3 },
  { slug: 'tutorial', name: 'Tutorial', count: 2 },
  { slug: 'development', name: 'Development', count: 6 },
  { slug: 'productivity', name: 'Productivity', count: 1 },
  { slug: 'technology', name: 'Technology', count: 2 },
  { slug: 'web-development', name: 'Web Development', count: 1 },
  { slug: 'tips', name: 'Tips & Tricks', count: 0 },
  { slug: 'document-tools', name: 'Document Tools', count: 1 },
  { slug: 'design-tools', name: 'Design Tools', count: 1 },
  { slug: 'developer-tools', name: 'Developer Tools', count: 1 }
];

// Blog service class
class BlogService {
  // Get all blog posts
  async getAllPosts() {
    // TODO: Replace with actual API call
    // return fetch('/api/blog/posts').then(res => res.json());
    return mockPosts;
  }

  // Get a single blog post by slug
  async getPostBySlug(slug) {
    // TODO: Replace with actual API call
    // return fetch(`/api/blog/posts/${slug}`).then(res => res.json());
    return mockPosts.find(post => post.slug === slug);
  }

  // Get featured posts
  async getFeaturedPosts(limit = 3) {
    // TODO: Replace with actual API call
    // return fetch(`/api/blog/posts/featured?limit=${limit}`).then(res => res.json());
    return mockPosts.filter(post => post.featured).slice(0, limit);
  }

  // Get posts by category
  async getPostsByCategory(category, limit = 10) {
    // TODO: Replace with actual API call
    // return fetch(`/api/blog/posts/category/${category}?limit=${limit}`).then(res => res.json());
    return mockPosts.filter(post => post.category.toLowerCase() === category.toLowerCase()).slice(0, limit);
  }

  // Get posts by tag
  async getPostsByTag(tag, limit = 10) {
    // TODO: Replace with actual API call
    // return fetch(`/api/blog/posts/tag/${tag}?limit=${limit}`).then(res => res.json());
    return mockPosts.filter(post => 
      post.tags.some(t => t.toLowerCase() === tag.toLowerCase())
    ).slice(0, limit);
  }

  // Search posts
  async searchPosts(query, limit = 10) {
    // TODO: Replace with actual API call
    // return fetch(`/api/blog/posts/search?q=${encodeURIComponent(query)}&limit=${limit}`).then(res => res.json());
    const searchTerm = query.toLowerCase();
    return mockPosts.filter(post => 
      post.title.toLowerCase().includes(searchTerm) ||
      post.excerpt.toLowerCase().includes(searchTerm) ||
      post.tags.some(tag => tag.toLowerCase().includes(searchTerm))
    ).slice(0, limit);
  }

  // Get recent posts
  async getRecentPosts(limit = 5) {
    // TODO: Replace with actual API call
    // return fetch(`/api/blog/posts/recent?limit=${limit}`).then(res => res.json());
    return mockPosts
      .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt))
      .slice(0, limit);
  }

  // Get all categories
  async getCategories() {
    // TODO: Replace with actual API call
    // return fetch('/api/blog/categories').then(res => res.json());
    return mockCategories;
  }

  // Get related posts
  async getRelatedPosts(postId, limit = 3) {
    // TODO: Replace with actual API call
    // return fetch(`/api/blog/posts/${postId}/related?limit=${limit}`).then(res => res.json());
    const currentPost = mockPosts.find(post => post.id === postId);
    if (!currentPost) return [];
    
    return mockPosts
      .filter(post => post.id !== postId)
      .filter(post => 
